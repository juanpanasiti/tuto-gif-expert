{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categories","includes","trim","console","error","type","value","onChange","target","getGifs","category","a","limit","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","width","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","cat","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAmBhD,OACE,sBAAMC,SAba,SAACC,GACpBA,EAAEC,iBACFN,GAAc,SAACO,GACb,OAAKA,EAAWC,SAASN,IAAeA,EAAWO,QACjDN,EAAc,IACR,CAAED,GAAR,mBAAsBK,MAEtBG,QAAQC,MAAM,0DACPJ,OAKX,SACE,uBAAOK,KAAK,OAAOC,MAAOX,EAAYY,SAlBhB,SAACT,GACzBF,EAAcE,EAAEU,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,qCAAAC,EAAA,yDAAiBC,EAAjB,+BAAyB,IAC1CF,EADiB,wBAEbG,EAFa,iDAEmCC,UAAUJ,GAF7C,kBAEgEE,EAFhE,sDAIAG,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXnB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,MAAM,QAAQC,IAAKP,IAClC,uBACA,8BACE,4BAAIA,IADN,IACiB,uBADjB,IACuB,gCAAQD,WCJxBS,EAAU,SAAC,GAAyB,IAAvBrB,EAAsB,EAAtBA,SAAsB,ECDpB,SAACA,EAAUE,GAAW,IAAD,EACrBlB,mBAAS,CACjCwB,KAAM,GACNc,SAAS,IAHoC,mBACxCC,EADwC,KACjCC,EADiC,KAgB/C,OAVAC,qBAAU,WACR1B,EAAQC,EAASE,GAChBwB,MAAM,SAAAC,GACLH,EAAS,CACPhB,KAAMmB,EACNL,SAAQ,SAGX,CAACtB,EAASE,IAENqB,EDbuBK,CAAa5B,EAFG,EAAZE,OAEtBY,EAFkC,EAEvCN,KAAYc,EAF2B,EAE3BA,QAEnB,OACE,qCACE,oBAAIL,UAAU,oCAAd,SAAmDjB,IAClDsB,GAAW,mBAAGL,UAAU,mCAAb,yBAEZ,qBAAKA,UAAU,YAAf,gBACGH,QADH,IACGA,OADH,EACGA,EAAQJ,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEOjBiB,EAlBM,WAAM,MAEU7C,mBAAS,CAAC,KAFpB,mBAEnBM,EAFmB,KAEPP,EAFO,KAI1B,OACC,qCACC,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACEO,EAAWoB,KAAI,SAACoB,GAAD,OACf,cAAC,EAAD,CAAmB9B,SAAU8B,GAAfA,YCVnBC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.6419e1ea.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setCategories((categories) => {\n      if (!categories.includes(inputValue) && inputValue.trim()) {\n        setInputValue('');\n        return [inputValue,...categories];\n      } else {\n        console.error('El elemento ya existe en el arreglo o está vacío');\n        return categories;\n      }\n    });\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category, limit = 10) => {\n  if (category) {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${limit}&api_key=0qcjQZHcsfhdgfFO9gFnON5Z4WxhxnU2`;\n\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url,\n      };\n    });\n\n    return gifs;\n  }\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className='card animate__animated animate__fadeIn'>\n      <img src={url} width='150px' alt={title} />\n      <br />\n      <p>\n        <b>{title}</b> <br/> <small>{id}</small>\n      </p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category, limit }) => {\n\n  const {data:images,loading} = useFetchGifs(category,limit);\n  \n  return (\n    <>\n      <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n      {loading && <p className='animate__animated animate__flash'>Cargando...</p>}\n      \n      <div className='card-grid'>\n        {images?.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category, limit) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category,limit)\n    .then( imgs => {\n      setState({\n        data: imgs,\n        loading:false\n      })\n    })\n  }, [category,limit]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\t//const categories = ['One Punch', 'Samuray X', 'Dragon Ball'];\n\tconst [categories, setCategories] = useState(['']);\n\n\treturn (\n\t\t<>\n\t\t\t<h2>GifExpertApp</h2>\n\t\t\t<AddCategory setCategories={setCategories} />\n\t\t\t<hr />\n\t\t\t<ol>\n\t\t\t\t{categories.map((cat) => (\n\t\t\t\t\t<GifGrid key={cat} category={cat} />\n\t\t\t\t))}\n\t\t\t</ol>\n\t\t</>\n\t);\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}